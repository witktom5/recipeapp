generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Unit {
  g
  kg
  ml
  l
}

enum IngredientType {
  Meat
  Vegetable
  Fruit
}

model Ingredient {
  id               String             @id @default(cuid())
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  name             String             @db.VarChar(50)
  ingredientType   IngredientType     @map("ingredient_type")
  ingredientTypeId String             @map("ingredient_type_id")
  recipeIngredient RecipeIngredient[]

  @@index([ingredientTypeId])
  @@map("ingredients")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  quantity     Int
  ingredientId String     @map("ingredient_id")
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])
  recipeId     String?    @map("recipe_id")

  @@index([ingredientId])
  @@index([recipeId])
  @@map("recipe_ingredients")
}

model Recipe {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  title       String             @db.VarChar(75)
  ingredients RecipeIngredient[]
  User        User?              @relation(fields: [userId], references: [id])
  userId      String?

  @@index([userId])
  @@map("recipes")
}
