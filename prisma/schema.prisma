generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipes       Recipe[]
  votes         Vote[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Unit {
  g
  kg
  ml
  l
}

enum IngredientType {
  meat
  vegetable
  fruit
  spice
  other
}

model Ingredient {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  name               String             @db.VarChar(50)
  unit               Unit
  ingredientType     IngredientType     @map("ingredient_type")
  recipe_ingredients RecipeIngredient[]

  @@map("ingredients")
}

model RecipeIngredient {
  id           String     @id @default(cuid())
  quantity     Int
  ingredientId String     @map("ingredient_id")
  recipeId     String?    @map("recipe_id")
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe?    @relation(fields: [recipeId], references: [id])

  @@index([ingredientId])
  @@index([recipeId])
  @@map("recipe_ingredients")
}

model Recipe {
  id          String             @id @default(cuid())
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @updatedAt @map("updated_at")
  title       String             @db.VarChar(75)
  ingredients RecipeIngredient[]
  userId      String?            @map("user_id")
  user        User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes       Vote[]

  @@index([userId])
  @@map("recipes")
}

enum VoteValue {
  UP
  DOWN
}

model Vote {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  value     VoteValue
  userId    String?   @map("user_id")
  recipeId  String?   @map("recipe_id")
  user      User?     @relation(fields: [userId], references: [id])
  Recipe    Recipe?   @relation(fields: [recipeId], references: [id])

  @@index([userId])
  @@index([recipeId])
}
